shellasync.vim for Vim version 7.0+   Last change: 10 November, 2020

Maintainer: Dmitry "troydm" Geurkov <d.geurkov@gmail.com>
Version: 0.3.8
Description: shellasync.vim plugin allows you to execute shell commands
asynchronously inside vim and see output in seperate buffer window.
Last Change: 10 November, 2020
License: Vim License (see :help license)
Website: https://github.com/troydm/shellasync.vim

Help on using shellasync.vim                                      *shellasync.vim*

1. Introduction                    |shellasync.vim-intro|
2. Configuration                   |shellasync.vim-configuration|
2. Usage                           |shellasync.vim-usage|

============================================================================================
 1. INTRODUCTION                                                  *shellasync.vim-intro*

shellasync.vim plugin allows you to asynchronously execute shell commands inside vim 
and see output inside a seperate window buffer without waiting for a command to finish.
It also includes shell emulator so you can interactivly execute commands inside vim buffer.
It uses python's subprocess and threading capabilities to execute shell commands in seperate
thread and non-blockingly get the output as the command executes

Note: this plugin is highly experimental, so it might make your vim process unstable

Platform: 
    only unix based operating systems are supported

Requirements: 
    vim 7.3 with atleast 569 patchset included and compiled with python support

============================================================================================
 2. CONFIGURATION                                         *shellasync.vim-configuration*

                                                         *g:shellasync_use_python2*
g:shellasync_use_python2     (Default: '0')
    Force |shellasync| to use Python 2 even if Python 3 is available

                                                         *g:shellasync_suppress_load_warning*
g:shellasync_suppress_load_warning     (Default: '0')
    Suppress loading warnings messages

                                                         *g:shellasync_print_return_value*
g:shellasync_print_return_value     (Default: '0')
    Print command's return value when command finishes it's execution

                                                         *g:shellasync_terminal_insert_on_enter*
g:shellasync_terminal_insert_on_enter     (Default: '1')
    Go to insert mode automaticly when you enter |ShellTerminal| buffer

============================================================================================
 2. USAGE                                                         *shellasync.vim-usage*

                                                                  *ShellTerminal*
:ShellTerminal
    Open new shell pseudo terminal. This terminal emulates real shell. 
    Just type your commands to have them executed in terminal
    All commands are executed as system shell commands except commands
    such as the following commands:
        |pwd| command prints current working directory
        |cd| command makes you change current working directory
        |env| prints 
        |setenv| or |export| to change global enviroment variables
        |unset| unsets global enviroment variable
        |exit| to exit pseudo shell
    Those commands are executed entirely by pseudo shell
    System shell commands that change current working directory and/or global
    enviroment variables won't affect pseudo terminal's current working
    directory or global enviroment variables
    Note: changes of current working directory or global enviroment variables
    are only active in pseudo terminal and won't affect vim's settings

                                                                  *Shell*
:Shell[!] {command}
    Execute a {command} in shell and opens a window to see it's output.
    If [!] is specified, command is expanded using |expand()| function before execution
    Buffer name is the same as {command} you've executed
    If same {command} is currently open in it's dedicated window it switches to 
    that window instead opening new one, if you want new window use |ShellNew|
    If previously executed {command} is running it automaticly does
    |ShellTerm| of that {command} and |ShellDelete| the remaining shell process
    Note: each command {command} opens a buffer window with same name as
    command and when this buffer is deleted the associated process id receives
    |ShellTerm| and |ShellDelete| commands

                                                                  *ShellNew*
:ShellNew[!] {command}
    Same as |Shell| only opens each same {command} in new window each time

                                                                  *ShellList*
:ShellList
    Opens a new window buffer with a list of currently running and finished
    shell processes. You can move your cursor over the the process line and 
    press |t| to send SIGTERM signal to that process, press |K| to send SIGKILL 
    signal to that process and press |x| or |d| to delete shell process from list 
    To send input to the process press |s| and provide input string
    If |ShellList| is in pid selection mode you can use |S| to select pid

                                                                  *ShellTerm*
:ShellTerm [pid]
    If shell process with {pid} is currently running, send a SIGTERM signal

                                                                  *ShellKill*
:ShellKill [pid]
    If shell process with {pid} is currently running, send a SIGKILL signal

                                                                  *ShellDelete*
:ShellDelete [pid]
    If shell process with {pid} finished executing, remove it from shell
    process list

                                                                  *ShellSend*
:[range]ShellSend [pid]
    Sends [range] as input to a {pid} process
    If no {pid} argument is provided uses {pid} associated with buffer
    To associate {pid} with buffer use |ShellSelect|

                                                                  *ShellSelect*
:ShellSelect [pid]
    Associate provided {pid} with current buffer
    If no {pid} is provided opens a |ShellList| in pid selection mode

                                                                  *ShellSelected*
:ShellSelected
    Print {pid} associated with current buffer

 vim:tw=78:ts=8:ft=help:norl:
